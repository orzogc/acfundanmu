// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.2
// source: LinkErrorCode.proto

package acproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LinkErrorCode int32

const (
	LinkErrorCode_SUCC                                LinkErrorCode = 0
	LinkErrorCode_BASIC_MIN                           LinkErrorCode = 10000
	LinkErrorCode_INTERNEL_ERROR                      LinkErrorCode = 10001
	LinkErrorCode_SERVICE_UNAVAILABLE                 LinkErrorCode = 10002
	LinkErrorCode_SERVICE_TIMEOUT                     LinkErrorCode = 10003
	LinkErrorCode_INVALID_TOKEN                       LinkErrorCode = 10004
	LinkErrorCode_REG_ENCYRPT_WITHOUT_TOKEN           LinkErrorCode = 10005
	LinkErrorCode_PARSE_PB_HDR_FAIL                   LinkErrorCode = 10006
	LinkErrorCode_PARSE_PB_PLD_FAIL                   LinkErrorCode = 10007
	LinkErrorCode_PARSE_PB_FAIL                       LinkErrorCode = 10008
	LinkErrorCode_DECODED_LEN_FAIL                    LinkErrorCode = 10009
	LinkErrorCode_INVALID_KEY                         LinkErrorCode = 10010
	LinkErrorCode_ENCRYPT_FAIL                        LinkErrorCode = 10011
	LinkErrorCode_DECRYPT_FAIL                        LinkErrorCode = 10012
	LinkErrorCode_INVALID_TAG                         LinkErrorCode = 10013
	LinkErrorCode_INVALID_VER                         LinkErrorCode = 10014
	LinkErrorCode_INVALID_COMPRESS_TYPE               LinkErrorCode = 10016
	LinkErrorCode_INVALID_ENCRYPT_TYPE                LinkErrorCode = 10017
	LinkErrorCode_NOT_REGISTER                        LinkErrorCode = 10018
	LinkErrorCode_USER_NOT_ONLINE                     LinkErrorCode = 10019
	LinkErrorCode_INVALID_COMMAND                     LinkErrorCode = 10020
	LinkErrorCode_PUSH_UNREGISTER_ERROR               LinkErrorCode = 10021
	LinkErrorCode_INVALID_SID                         LinkErrorCode = 10022
	LinkErrorCode_INVALID_INSTANCE_ID                 LinkErrorCode = 10023
	LinkErrorCode_CLIENT_LOCALE_NOT_MATCH             LinkErrorCode = 10024
	LinkErrorCode_INVALID_TOKEN_PASSWORD_CHANGED      LinkErrorCode = 10025
	LinkErrorCode_INVALID_TOKEN_TOKEN_EXPIRED         LinkErrorCode = 10026
	LinkErrorCode_INVALID_TOKEN_TOKEN_VALUE_ERROR     LinkErrorCode = 10027
	LinkErrorCode_INVALID_TOKEN_LOGIN_ON_OTHER_DEVICE LinkErrorCode = 10028
	LinkErrorCode_FORCE_RECONNECT                     LinkErrorCode = 10029
	LinkErrorCode_CLIENT_TIMEOUT                      LinkErrorCode = 10030
	LinkErrorCode_INVALID_ARGUMENT                    LinkErrorCode = 10031
	LinkErrorCode_INVALID_FORMAT_TOKEN                LinkErrorCode = 10032
	LinkErrorCode_EMPTY_PAYLOAD                       LinkErrorCode = 10033
	LinkErrorCode_COMPRESS_FAIL                       LinkErrorCode = 10034
	LinkErrorCode_DECOMPRESS_FAIL                     LinkErrorCode = 10035
	LinkErrorCode_OUT_OF_ORDER                        LinkErrorCode = 10036
	LinkErrorCode_OUT_OF_LIMIT                        LinkErrorCode = 10037
	LinkErrorCode_TOO_LARGE_PAYLOAD                   LinkErrorCode = 10038
	LinkErrorCode_ANONYMOUSE_ERROR                    LinkErrorCode = 10039
	LinkErrorCode_BASIC_MAX                           LinkErrorCode = 19999
)

// Enum value maps for LinkErrorCode.
var (
	LinkErrorCode_name = map[int32]string{
		0:     "SUCC",
		10000: "BASIC_MIN",
		10001: "INTERNEL_ERROR",
		10002: "SERVICE_UNAVAILABLE",
		10003: "SERVICE_TIMEOUT",
		10004: "INVALID_TOKEN",
		10005: "REG_ENCYRPT_WITHOUT_TOKEN",
		10006: "PARSE_PB_HDR_FAIL",
		10007: "PARSE_PB_PLD_FAIL",
		10008: "PARSE_PB_FAIL",
		10009: "DECODED_LEN_FAIL",
		10010: "INVALID_KEY",
		10011: "ENCRYPT_FAIL",
		10012: "DECRYPT_FAIL",
		10013: "INVALID_TAG",
		10014: "INVALID_VER",
		10016: "INVALID_COMPRESS_TYPE",
		10017: "INVALID_ENCRYPT_TYPE",
		10018: "NOT_REGISTER",
		10019: "USER_NOT_ONLINE",
		10020: "INVALID_COMMAND",
		10021: "PUSH_UNREGISTER_ERROR",
		10022: "INVALID_SID",
		10023: "INVALID_INSTANCE_ID",
		10024: "CLIENT_LOCALE_NOT_MATCH",
		10025: "INVALID_TOKEN_PASSWORD_CHANGED",
		10026: "INVALID_TOKEN_TOKEN_EXPIRED",
		10027: "INVALID_TOKEN_TOKEN_VALUE_ERROR",
		10028: "INVALID_TOKEN_LOGIN_ON_OTHER_DEVICE",
		10029: "FORCE_RECONNECT",
		10030: "CLIENT_TIMEOUT",
		10031: "INVALID_ARGUMENT",
		10032: "INVALID_FORMAT_TOKEN",
		10033: "EMPTY_PAYLOAD",
		10034: "COMPRESS_FAIL",
		10035: "DECOMPRESS_FAIL",
		10036: "OUT_OF_ORDER",
		10037: "OUT_OF_LIMIT",
		10038: "TOO_LARGE_PAYLOAD",
		10039: "ANONYMOUSE_ERROR",
		19999: "BASIC_MAX",
	}
	LinkErrorCode_value = map[string]int32{
		"SUCC":                                0,
		"BASIC_MIN":                           10000,
		"INTERNEL_ERROR":                      10001,
		"SERVICE_UNAVAILABLE":                 10002,
		"SERVICE_TIMEOUT":                     10003,
		"INVALID_TOKEN":                       10004,
		"REG_ENCYRPT_WITHOUT_TOKEN":           10005,
		"PARSE_PB_HDR_FAIL":                   10006,
		"PARSE_PB_PLD_FAIL":                   10007,
		"PARSE_PB_FAIL":                       10008,
		"DECODED_LEN_FAIL":                    10009,
		"INVALID_KEY":                         10010,
		"ENCRYPT_FAIL":                        10011,
		"DECRYPT_FAIL":                        10012,
		"INVALID_TAG":                         10013,
		"INVALID_VER":                         10014,
		"INVALID_COMPRESS_TYPE":               10016,
		"INVALID_ENCRYPT_TYPE":                10017,
		"NOT_REGISTER":                        10018,
		"USER_NOT_ONLINE":                     10019,
		"INVALID_COMMAND":                     10020,
		"PUSH_UNREGISTER_ERROR":               10021,
		"INVALID_SID":                         10022,
		"INVALID_INSTANCE_ID":                 10023,
		"CLIENT_LOCALE_NOT_MATCH":             10024,
		"INVALID_TOKEN_PASSWORD_CHANGED":      10025,
		"INVALID_TOKEN_TOKEN_EXPIRED":         10026,
		"INVALID_TOKEN_TOKEN_VALUE_ERROR":     10027,
		"INVALID_TOKEN_LOGIN_ON_OTHER_DEVICE": 10028,
		"FORCE_RECONNECT":                     10029,
		"CLIENT_TIMEOUT":                      10030,
		"INVALID_ARGUMENT":                    10031,
		"INVALID_FORMAT_TOKEN":                10032,
		"EMPTY_PAYLOAD":                       10033,
		"COMPRESS_FAIL":                       10034,
		"DECOMPRESS_FAIL":                     10035,
		"OUT_OF_ORDER":                        10036,
		"OUT_OF_LIMIT":                        10037,
		"TOO_LARGE_PAYLOAD":                   10038,
		"ANONYMOUSE_ERROR":                    10039,
		"BASIC_MAX":                           19999,
	}
)

func (x LinkErrorCode) Enum() *LinkErrorCode {
	p := new(LinkErrorCode)
	*p = x
	return p
}

func (x LinkErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_LinkErrorCode_proto_enumTypes[0].Descriptor()
}

func (LinkErrorCode) Type() protoreflect.EnumType {
	return &file_LinkErrorCode_proto_enumTypes[0]
}

func (x LinkErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkErrorCode.Descriptor instead.
func (LinkErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_LinkErrorCode_proto_rawDescGZIP(), []int{0}
}

var File_LinkErrorCode_proto protoreflect.FileDescriptor

var file_LinkErrorCode_proto_rawDesc = []byte{
	0x0a, 0x13, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x41, 0x63, 0x46, 0x75, 0x6e, 0x44, 0x61, 0x6e, 0x6d,
	0x75, 0x2e, 0x49, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2a, 0xcd, 0x07, 0x0a, 0x0d, 0x4c,
	0x69, 0x6e, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x55, 0x43, 0x43, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x09, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f,
	0x4d, 0x49, 0x4e, 0x10, 0x90, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x91, 0x4e, 0x12, 0x18, 0x0a, 0x13, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x92, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x93, 0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x94, 0x4e, 0x12,
	0x1e, 0x0a, 0x19, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x4e, 0x43, 0x59, 0x52, 0x50, 0x54, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x95, 0x4e, 0x12,
	0x16, 0x0a, 0x11, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x50, 0x42, 0x5f, 0x48, 0x44, 0x52, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x10, 0x96, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x41, 0x52, 0x53, 0x45,
	0x5f, 0x50, 0x42, 0x5f, 0x50, 0x4c, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x97, 0x4e, 0x12,
	0x12, 0x0a, 0x0d, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x50, 0x42, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x10, 0x98, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x44, 0x5f, 0x4c,
	0x45, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x99, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x9a, 0x4e, 0x12, 0x11, 0x0a, 0x0c,
	0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x9b, 0x4e, 0x12,
	0x11, 0x0a, 0x0c, 0x44, 0x45, 0x43, 0x52, 0x59, 0x50, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x9c, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x41,
	0x47, 0x10, 0x9d, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x56, 0x45, 0x52, 0x10, 0x9e, 0x4e, 0x12, 0x1a, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0xa0, 0x4e, 0x12, 0x19, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x43, 0x52, 0x59, 0x50, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xa1, 0x4e, 0x12, 0x11, 0x0a,
	0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0xa2, 0x4e,
	0x12, 0x14, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0xa3, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0xa4, 0x4e, 0x12, 0x1a, 0x0a, 0x15,
	0x50, 0x55, 0x53, 0x48, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa5, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x44, 0x10, 0xa6, 0x4e, 0x12, 0x18, 0x0a, 0x13, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49,
	0x44, 0x10, 0xa7, 0x4e, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0xa8, 0x4e, 0x12, 0x23, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x44, 0x10, 0xa9, 0x4e, 0x12, 0x20, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0xaa, 0x4e, 0x12, 0x24, 0x0a, 0x1f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xab, 0x4e, 0x12,
	0x28, 0x0a, 0x23, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x4f, 0x4e, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0xac, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0xad, 0x4e, 0x12,
	0x13, 0x0a, 0x0e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x10, 0xae, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xaf, 0x4e, 0x12, 0x19, 0x0a, 0x14, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x10, 0xb0, 0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f,
	0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0xb1, 0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x4f,
	0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xb2, 0x4e, 0x12, 0x14,
	0x0a, 0x0f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x10, 0xb3, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x10, 0xb4, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x4f, 0x55, 0x54, 0x5f, 0x4f,
	0x46, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0xb5, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x4f,
	0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10,
	0xb6, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x41, 0x4e, 0x4f, 0x4e, 0x59, 0x4d, 0x4f, 0x55, 0x53, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xb7, 0x4e, 0x12, 0x0f, 0x0a, 0x09, 0x42, 0x41, 0x53,
	0x49, 0x43, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x9f, 0x9c, 0x01, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x72, 0x7a, 0x6f, 0x67, 0x63, 0x2f,
	0x61, 0x63, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x6d, 0x75, 0x2f, 0x61, 0x63, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_LinkErrorCode_proto_rawDescOnce sync.Once
	file_LinkErrorCode_proto_rawDescData = file_LinkErrorCode_proto_rawDesc
)

func file_LinkErrorCode_proto_rawDescGZIP() []byte {
	file_LinkErrorCode_proto_rawDescOnce.Do(func() {
		file_LinkErrorCode_proto_rawDescData = protoimpl.X.CompressGZIP(file_LinkErrorCode_proto_rawDescData)
	})
	return file_LinkErrorCode_proto_rawDescData
}

var file_LinkErrorCode_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_LinkErrorCode_proto_goTypes = []any{
	(LinkErrorCode)(0), // 0: AcFunDanmu.Im.Basic.LinkErrorCode
}
var file_LinkErrorCode_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_LinkErrorCode_proto_init() }
func file_LinkErrorCode_proto_init() {
	if File_LinkErrorCode_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_LinkErrorCode_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_LinkErrorCode_proto_goTypes,
		DependencyIndexes: file_LinkErrorCode_proto_depIdxs,
		EnumInfos:         file_LinkErrorCode_proto_enumTypes,
	}.Build()
	File_LinkErrorCode_proto = out.File
	file_LinkErrorCode_proto_rawDesc = nil
	file_LinkErrorCode_proto_goTypes = nil
	file_LinkErrorCode_proto_depIdxs = nil
}
